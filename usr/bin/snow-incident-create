#!/usr/bin/python3

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, json, optparse, pprint, requests, sys, yaml

description = "create an Incident in SNOW"
usage = "%prog [options] subject"

#########################################################################
### Subroutines #########################################################
#########################################################################

def submitRequest(request):
    """
    """
    url = "%s/api/now/v1/table/incident" % (config['servicenow']['url'])
    auth = (config['servicenow']['username'], config['servicenow']['password'])
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}

    if opt.debug: print(json.dumps(request, sort_keys=True, indent=4))

    response = requests.post(url, auth=auth, headers=headers, json=request)
    try:
        j = response.json()
        incident = j['result']['number']
        return incident
    except Exception as e:
        print("error: could not create request - %s" % e)
        sys.exit(-1)


#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser (usage = usage, description = description)
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--config', dest='config', action='store',
        default=config_file)
    p.add_option ('--user', dest='user', action='store',
        default=getpass.getuser())
    p.add_option ('--ticket', dest='ticket', action='store', default=None)

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        sys.exit(-1)

    ## load the ticket out of a YAML file
    if opt.ticket == None:
        p.print_help()
        sys.exit(-1)
    try:
        with open(opt.ticket, 'r') as stream:
            try:
                ticket_stream = yaml.load(stream)
                ticket = ticket_stream['ticket']
            except yaml.YAMLError as exc:
                print(exc)
                sys.exit(-1)
    except Exception as e:
        print ("could not open %s: %s" % (opt.ticket, e))
        sys.exit(-1)

    subject = ' '.join(args).rstrip()
    text = ''.join(sys.stdin.readlines()).rstrip()

    ticket['short_description'] = subject
    ticket['description'] = text

    global config
    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    snow = pyfnalsnow.connect()

    u = pyfnalsnow.userByUsername(opt.user)
    if not u:
        print ("no matching SNOW user: %s" % opt.user)
        sys.exit(-1)
    ticket['caller_id'] = u['user_name']

    number = submitRequest(ticket)
    tkt = pyfnalsnow.tktByNumber(number)
    print (u"\n".join(pyfnalsnow.tktString(tkt, \
        type='short')).encode('utf-8').strip())

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-incident-create - create an Incident in Service Now

=head1 SYNOPSIS

echo "body" | B<snow-ritm-list> --ticket F<YAML> 'subject'

=head1 USAGE

snow-incident-create creates a Service Now (SNOW) incident based on a template
YAML file, a subject, and a body.

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --ticket YAML_FILE

We need a lot of default settings, so this is a start:

    ticket:
        assignment_group:       'Scientific Server Support'
        group:                  'Scientific Server Support'
        impact:                 '4'
        short_description:      '(no subject)'
        u_categorization:       'Hardware -- Server -- Linux'
        u_item:                 'Linux'
        u_operational_category: 'Break/Fix'
        u_page_primary:         '0'
        u_reported_source:      'Event Monitoring'
        urgency:                '4'
        u_service:              'Scientific Services'
        u_service_type:         'Server'

=item --user USER

Default: the user that ran the script.

=item --debug

If set, prints some debugging data.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2018, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
