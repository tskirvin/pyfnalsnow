#!/usr/bin/python3

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, optparse, pprint, sys

description = "assign a SNOW object to a user/group in SNOW"
usage = "%prog [options] NUMBER"

#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser (usage = usage, description = description)
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--config', dest='config', action='store',
        default=config_file)
    p.add_option ('--group', dest='group', action='store', default='default')
    p.add_option ('--user',  dest='user',  action='store', default='default')

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        sys.exit(-1)

    ## default values for the update hash
    update = { 'assignment_group': opt.group, 'assigned_to': opt.user }
    g = opt.group
    u = opt.user

    if g == 'default': 
        del update['assignment_group']
        group = '*none*'

    if u == 'default': 
        update['assigned_to'] = ''
        user = '*none*'

    ## connect to SNOW
    number = pyfnalsnow.tktNumberParse(args[0])
    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    snow = pyfnalsnow.connect()

    group = ''
    if 'assignment_group' in update:
        try:
            group = pyfnalsnow.groupByName(update['assignment_group'])
        except Exception as e:
            print("group %s does not exist in SNOW" % update['assignment_group'])
            sys.exit(-1)

    tkt = pyfnalsnow.tktByNumber(number)
    if not tkt:
        print("no matches for ticket '%s'" % number)
        sys.exit(-1)

    user = ''
    if 'assigned_to' in update and update['assigned_to'] != 0:
        try:
            if update['assigned_to'] == '':
                user = ''
            else:
                u = pyfnalsnow.userByUsername(update['assigned_to'])
                user = u['user_name']

        except Exception as e:
            print("user %s does not exist in SNOW " % update['assigned_to'])
            sys.exit(-1)

        if 'assignment_group' in update: g1 = update['assignment_group']
        else:          g1 = pyfnalsnow.groupLink(tkt['assignment_group'])

        if user != '':
            if not pyfnalsnow.userInGroup(user, g1):
                print("user %s is not in group '%s'" % (update['assigned_to'], g1))
                sys.exit(-1)

    if tkt['assignment_group'] == '':
        if 'assignment_group' not in update:
            print("ticket is not in a group, no --group passed in")
            sys.exit(-1)
        else:
            g = tkt['assignment_group']
    
    if opt.debug:
        u = update['assigned_to']
        g = update['assignment_group']
        print("Assigning tkt %s to %s/%s" % (number, g, u))

    try:
        tkt = pyfnalsnow.tktUpdate(number, update)
        print("\n".join(pyfnalsnow.tktString(tkt, 'base')).encode('utf-8').strip())
    except Exception as e:
        print(e)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-tkt-assign - assign SNOW object ownership

=head1 SYNOPSIS

snow-tkt-assign RITM456995 --user richt

snow-tkt-assign RITM456995 --user richt --group 'SSI Internal'

snow-tkt-assign RITM456995 --group 'SSI Internal'

=head1 USAGE

snow-tkt-assign sets the `assigment_group` and `assigned_to` fields for a
specific sc_req_item object (RITM) in Service Now (SNOW), and prints the
resulting output to STDOUT. 

This generally goes down one of three paths:

=over 4

=item User and Group

We confirm that the user and group exist, and that the user is *in* the
group in question.  Assigns both fields.

=item User, no Group

We confirm that the user is in the ticket's existing group assignment.
Assigns just the one field.

=item Group, no User

Confirms that the group exists, and empties the user ownership.

=back

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --group  I<groupname>

What username is actually adding this entry?

=item --user I<username>

What username is actually adding this entry?

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2017, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
