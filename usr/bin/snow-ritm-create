#!/usr/bin/python3

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, optparse, requests, sys

description = "create an RITM in SNOW"
usage = "%prog [options] subject"

template = {
    'catalog_item': {
        'sys_id': '18c27227042950008638553dd6544037',
        'vars': {
            'priority': 3,
            'urgency': 3
        }
    }
}

#########################################################################
### Subroutines #########################################################
#########################################################################

def submitRequest(request):
    """
    """
    url = "https://%s/service.do" % (config['servicenow']['hostname'])
    auth = (config['servicenow']['username'], config['servicenow']['password'])
    headers = {'Content-type': 'application/json', 'Accept': 'application/json'}

    response = requests.post(url, auth=auth, headers=headers, json=request)
    try:
        j = response.json()
        ritm = j['items'][0]['number']
        req = j['request']
        if opt.debug: print("%s / %s" % (req, ritm))
        return (req, ritm)
    except Exception as e:
        print("error: could not create request - %s" % e)
        sys.exit(-1)


#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser(usage=usage, description=description)
    p.add_option('--debug', dest='debug', action='store_true', default=False)
    p.add_option('--config', dest='config', action='store',
        default=config_file)
    p.add_option('--group', dest='group', action='store', default='')
    p.add_option('--priority', dest='priority', action='store', default=None)
    p.add_option('--urgency', dest='urgency', action='store', default=None)
    p.add_option('--category', dest='category', action='store', default=None)
    p.add_option('--user', dest='user', action='store',
        default=getpass.getuser())

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        sys.exit(-1)

    subject = ' '.join(args).rstrip()
    text = ''.join(sys.stdin.readlines()).rstrip()

    global config
    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    pyfnalsnow.connect()

    ret = []

    u = pyfnalsnow.userByUsername(opt.user)
    if not u:
        print("no matching SNOW user: %s" % opt.user)
        sys.exit(-1)

    if opt.group != '':
        try:
            pyfnalsnow.groupByName(opt.group)
        except Exception:
            print("group %s does not exist in SNOW" % opt.group)
            sys.exit(-1)

    base = template
    base['catalog_item']['vars']['short_description'] = subject
    base['catalog_item']['vars']['description'] = text
    base['catalog_item']['vars']['requested_for'] = u['sys_id']

    if opt.debug: print(base)

    ret = submitRequest(base)
    for i in ret:
        t = config['ritm_template']
        if opt.group != '': t['assignment_group'] = opt.group
        if opt.category: t['u_categorization'] = opt.category
        if opt.priority: t['priority'] = opt.priority
        if opt.urgency: t['urgency'] = opt.urgency

        tkt = pyfnalsnow.tktUpdate(i, t)
        print("\n".join(pyfnalsnow.tktString(tkt, type='short')).strip())
        print("")

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-ritm-create - create a new Request/RITM pair in Service Now

=head1 SYNOPSIS

echo "my body" | B<snow-ritm-create> "my subject"

echo "my body" | B<snow-ritm-create> "my subject" --group "SSI Internal"

=head1 USAGE

snow-ritm-create creates a new sc_request (request) and sc_req_item (RITM)
pair in Service Now (SNOW), and prints a short summary of the new objects
to STDOUT.

Additional template data for the created item come out of the
F<ritm_template> section of the config file.

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --debug

If set, prints some debugging data.

=item --group I<group>

If offered, sets the ownership of the request/RITM to this group.  This
group must exist.

=item --user I<username>

Set the requestor to this individual.  The default is the invoking person.

=item SUBJECT

The "short description" should come on the command line.

=item STDIN

The "text" of the ticket should come on STDIN.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2017, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
