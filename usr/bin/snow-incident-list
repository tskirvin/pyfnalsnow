#!/usr/bin/python3

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, optparse, pprint, sys

description = "query for incident objects in SNOW"
usage = "%prog [options] subject"

#########################################################################
### Subroutines #########################################################
#########################################################################

def findGroups():
    if opt.group == 'all': groups = pyfnalsnow.userInGroups(opt.user)
    else:                  groups = [ opt.group ]
    return groups

#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser (usage = usage, description = description)
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--config', dest='config', action='store',
        default=config_file)
    p.add_option ('--group', dest='group', action='store', default='all')
    p.add_option ('--user', dest='user', action='store', 
        default=getpass.getuser())
    p.add_option ('--query', dest='query', action='store', default='group',
        choices=['assign', 'group', 'submit', 'ci'])
    p.add_option ('--subquery', dest='subquery', action='store', default='open',
        choices=['closed', 'open', 'unresolved'])
    p.add_option ('--caller', dest='caller', action='store', default=None)

    global opt
    opt, args = p.parse_args()

    if len(args) != 0:
        p.print_help()
        sys.exit(-1)

    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    snow = pyfnalsnow.connect()

    ret = []

    if opt.debug: print("querying %s/%s" % (opt.query, opt.subquery))

    if opt.query == 'group':
        for g in findGroups():
            ret.append("== Unresolved Incidents assigned to group '%s' ==" % g)

            for t in pyfnalsnow.tktSearch('incident', group=g, \
                status=opt.subquery, caller=opt.caller):
                summary = pyfnalsnow.tktStringSummary(t)
                ret.append('')
                ret.extend(summary)
            ret.append('')

    elif opt.query == 'assign':
        ret.append("== Unresolved Incidents assigned to user '%s' ==" % opt.user)
        for t in pyfnalsnow.tktSearch('incident', assigned=opt.user,
                status=opt.subquery, caller=opt.caller):
            summary = pyfnalsnow.tktStringSummary(t)
            ret.append('')
            ret.extend(summary)
        ret.append('')

    elif opt.query == 'submit':
        ret.append("== Unresolved Incidents submitted by user '%s' ==" % opt.user)
        for t in pyfnalsnow.tktSearch('incident', submit=opt.user,
                status=opt.subquery, caller=opt.caller):
            summary = pyfnalsnow.tktStringSummary(t)
            ret.append('')
            ret.extend(summary)
        ret.append('')


    else:
        print("unknown query type: %s" % opt.query)
        sys.exit(-1)

    print('\n'.join(ret))
    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-incident-list - search for incident objects by current status

=head1 SYNOPSIS

B<snow-incident-list>

B<snow-incident-list> --group 'Service Desk'

B<snow-incident-list> --query group --user esimm

B<snow-incident-list> --query assign --user tskirvin

B<snow-incident-list> --query submit --user tskirvin

=head1 USAGE

snow-incident-list queries Service Now (SNOW) to pull down data about a specific
incident object (Incident), and prints the output to STDOUT.  

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --debug

If set, prints some debugging data.

=item --caller I<username>

Query for tickets by a given caller ID.  Meant to be used in conjunction
with other searchers.  No default.

=item --group I<group>

Query for tickets associated with a given group.  The default is to search
for each group associated with the selected/default user.

=item --query I<type>

What kind of search output do you want to see?  Defaults to 'group'.

=over 2

=item assign

Searches for tickets assigned to the selected username.

=item group

Searches for tickets in the selected group.  Default.

=item submit

Searches for tickets submitted by the selected username.

=back

=item --subquery I<query>

How do you want to modify the kind of search?  Default: 'unresolved'

=over 2

=item closed

Show closed tickets.

=item open

Show open tickets.

=item unresolved

Show unresolved tickets.

=back

=item --user I<username>

Selects the user for which we will query.  Defaults to the invoker.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2017-2018, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
