#!/usr/bin/python3

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, optparse, sys

description = "resolve a SNOW ticket"
usage = "%prog [options] NUMBER"

#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser (usage = usage, description = description)
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--config', dest='config', action='store',
        default=config_file)
    p.add_option ('--user', dest='user', action='store',
        default=getpass.getuser())
    p.add_option ('--goal', dest='goal', action='store', default=None)

    global opt
    opt, args = p.parse_args()

    if len(args) != 1:
        p.print_help()
        sys.exit(-1)

    text = '\n'.join(sys.stdin.readlines()).rstrip()

    update = {
        'text': text,
        'user': opt.user,
    }
    
    ## connect to SNOW
    number = pyfnalsnow.tktNumberParse(args[0])
    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    snow = pyfnalsnow.connect()

    try:
        tkt_original = pyfnalsnow.tktByNumber(number)
    except Exception as e:
        print("could not find ticket matching %s: %s" % (number, e))

    try:
        tkt = pyfnalsnow.tktResolve(tkt_original, update, debug=opt.debug,
            goal=opt.goal)
        print("\n".join(pyfnalsnow.tktStringResolution(tkt)).encode('utf-8').strip())
    except Exception as e:
        print("could not resolve ticket %s: %s" % (number, e))


    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-tkt-resolve - resolve a SNOW ticket

=head1 SYNOPSIS

echo TEXT | snow-tkt-resolve RITM456995 

=head1 USAGE

snow-tkt-resolve closes a ticket (RITM or Incident) in Service Now (SNOW).

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --goal GOAL_STATE

Set a goal state, if you have one.  Useful to (e.g.) cancel incidents
instead of closing them normally.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2018, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
