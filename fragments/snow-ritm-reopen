#!/usr/bin/python3

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, optparse, sys

description = "resolve an sc_req_item object"
usage = "%prog [options] NUMBER"

#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser (usage = usage, description = description)
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--config', dest='config', action='store',
        default=config_file)
    p.add_option ('--user',  dest='user', action='store',
            default=getpass.getuser())

    global opt
    opt, args = p.parse_args()

    if len(args) != 1:
        p.print_help()
        sys.exit(-1)

    ## connect to SNOW
    number = pyfnalsnow.tktNumberParse(args[0])
    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    snow = pyfnalsnow.connect()

    tkt = pyfnalsnow.tktByNumber(number)
    if not tkt:
        print "no matches for ticket '%s'" % number
        sys.exit(-1)

    if not pyfnalsnow.tktIsResolved(tkt):
        print "%s is not already resolved" % number
        sys.exit(1)

    update = {
        'active': True,
        'state':       -5,
        'close_notes': ''
    }

    ritm = pyfnalsnow.tktUpdate(number, update)

    print u"\n".join(pyfnalsnow.tktString(ritm, 'short')).encode('utf-8').strip()

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-ritm-assign - assign sc_req_item object ownership

=head1 SYNOPSIS

snow-ritm-assign RITM456995 --user richt

snow-ritm-assign RITM456995 --user richt --group 'SSI Internal'

snow-ritm-assign RITM456995 --group 'SSI Internal'

=head1 USAGE

snow-ritm-assign sets the `assigment_group` and `assigned_to` fields for a
specific sc_req_item object (RITM) in Service Now (SNOW), and prints the
resulting output to STDOUT. 

This generally goes down one of three paths:

=over 4

=item User and Group

We confirm that the user and group exist, and that the user is *in* the
group in question.  Assigns both fields.

=item User, no Group

We confirm that the user is in the ticket's existing group assignment.
Assigns just the one field.

=item Group, no User

Confirms that the group exists, and empties the user ownership.

=back

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --group  I<groupname>

What username is actually adding this entry?

=item --user I<username>

What username is actually adding this entry?

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2017, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
